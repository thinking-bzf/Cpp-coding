1.printf scanf 与putchar getchar的区别
	print和scanf都可以对多个字符(串)或数字进行格式化的操作
		print("%d %f",a,b) 输出一个整数和一个浮点数 中间有空格隔开
		printf("%c %s",a,b) 输出一个字符和一个字符串 中间有空格隔开
		
		scanf("%d%f",&a,&b) 执行该条语句时 键盘打入一个整数和浮点数 即使该语句中间没有空格 你需要用空格或回车隔开两个数字 
			注意！两个&
	getchar和putchar只能操作一个字符
		需要定义一个字符变量 
		char x;
		然后把getchar赋值给x
		x=getchar() 这句语句会让你键入一个字符(可以是数字 但是x还是会以字符的形式存储)
		要输出x 需要调用putchar
		putchar(x)
		注意！getchar是可以得到回车 空格 tab的 所以当出现是getchar的时候需要格外注意是否打了空格 
			打完空格之后该语句就执行完毕了直接跳到下一句语句了
			如下
			char x;
			x = getchar();
			putchar(x);
			如果在键盘上打了空格显示的也是空格 一般看不到 如果直接打入回车直接结束程序 直接输出回车 但你看不到

2.条件表达式 (和if不一样)
	int x=3
	printf((x%2)?("奇数%d"):("偶数%d\n"),x);
	如上的意思就是要通过判断x有什么条件打印不同的样式
	可以把他看成一个函数 函数里面都是if
	if(x%2) //x%2判断是否可以被2整除 非0为真 所以x%2为真除以二有余数 就是奇数 反之就是偶数
		printf("奇数%d",x);
	else
		printf("偶数%d\n",x);
	条件表达式的一般格式: a?b:c;
	解释: 判断a是否为真, 如果a为真 那就选择b, 如果a为假 那就选择c.

3.前置++和后置++的区别
	int x=3,y=3;
	printf("x++=%d",x++);   //输出3
	printf("++y=%d",++y);   //输出4

	printf("x=%d",x)        //输出4
	printf("y=%d",y)        //输出4

	两个++的最大区别是及时性 打个比喻
	x就是有点傻傻的(像你ahhhh)  y比较机敏
	现在x和y盘子里有3颗糖 
	printf老师分别问俩人有几颗糖 但是此时突然有人往两个人的盘子各放了一颗糖
	x没有发现 就回答了3颗 y及时发现 回答了4颗
	printf老师说不对哦 就再各问了一下有几颗糖
	x低头一看 才发现有4颗(看是不是很像你) 回答了4
	y表示我已经发现了 还是回答了4颗

	两个++的主要区别就是在执行这一句的时候返回的值是什么 当执行完这一句后两者没有区别 因为两者都累加了1
	--的道理是一样的

4.switch语句 选择语句 关注break的存在
	switch(k)包含很多case x : block ; 语句块 k等于x时 则执行block语句 
	但是存在多条case的时候要格外注意break;语句
		正常的case语句都是会附带break; 表示执行完这条case语句后 退出switch语句直接干其他事
		但是有些题目会出现一个case结束后没有break 这样执行完了当前case 会跳转至下一个case
			如果此时的条件也满足这一个case 那这一个case语句也会被执行
	如下很经典 
	int k = 2;
	switch(k)
	{
	  case 1:printf("%d\n",k++); break;
	  case 2:printf("%d",k++);
	  case 3:printf("%d",k++); break;
	  case 4:printf("%d\n",k++);
	  default:printf("Full!\n");
	}
	printf("%d",k);

	此时 k=2 进入switch语句 先执行case 2 : case 2:printf("%d",k++); 此时有第3点中后置++ 时效性比较低 所以打印2 打印完之后k+1 ->k=3
	发现case 2 后面没有break 所以还是会跳到case 3: 此时的k=3 所以也满足case 3 所以也执行 和上面同理 打印了 3 这之后 k=4
	case 3 有break语句 所以执行完之后直接退出 执行printf("%d",k); 打印了4
	所以最终的结果是234
	
5.for循环和while、do-while循环
	for循环: 比较好理解 
		for(int i=0;i < 5;i++)
		{
			printf("%d",i);
		}
		上述语句的意思是 开始i=0 但i<5的时候就要执行“{}”中的语句 
		i++在第一次进入循环的时候不运行 执行完后会执行i++ 也就是说回到for的时候i=1 以此类推循环
		这样一直循环 一直到i=4 printf后 i+1变成了5 这个时候i<5不成立 才结束循环
		得到结果01234

	while 
		int i=0;
		while(i<5)
		{
			printf("%d",i);
			i++;
		}
		上述语句和for循环的道理是一样的 实现的效果也是一样的 while的“()”里面的东西就是须满足的条件
		结果01234

	do-while 
		int i=0;
		do{
			printf("%d",i);
			i++;
		}while(i<5);
		do-while语句和while的道理差不多的 两者的区别只在在什么时候判断条件成立 do-while语句是直接运行里面的语句块 在判断条件
		结果01234

	一般来讲 可以根据字面意思一步一步运行下去 等到有一定的规律之后就可得到结果

6.continue和break
	这两个语句使用在循环里面的 下面都已for循环作为代表
	continue: 顾名思义是指继续 ,他会直接跳过当前循环 直接继续下一个循环
		for(int i=0;i < 5;i++)
		{
			if(i==3)
			{
				continue;
			}
			printf("%d",i);
		}
		上述语句多加了一个判断 如果i等于3的话执行continue 意思就是跳过printf(3) i直接+1变成4 进入下一步循环
		得到的结果就是0124
	break: break有休息的意思 就是说执行了这一句 就直接跳出循环 不在循环下去了
		for(int i=0;i < 5;i++)
		{
			if(i==3)
			{
				break;
			}
			printf("%d",i);
		}
		上述的语句continue改成了break 当i=3的时候执行break 就不执行下一趟循环了 
		得到的结果就是012

7.函数的定义及其参数
	定义: 函数主要解决重复的计算 将某一个计算方法封装成一个函数 
		就像微波炉一样 你给他寿司x 设置了时间 他就会加热 得到热的寿司x
		加热就是一个函数 寿司就是return的类型 时间就是参数 按照C语言的函数定义如下:
		寿司 加热(int 时间,寿司 m){
			...
			return m;//此时寿司已经经过上面的处理 得到一个热的寿司 返回到你命名的变量中
		}
		//以上就是一个完整的函数定义过程
		int mian()
		{
			寿司 x; //寿司在这表示以重类型 想float一样
			int time;
			热寿司=加热(time,x); 
			//你方向这里的加热括号里的(time,x)和上面的(时间,m) 不一样 但是没有关系 这是实参和形参 
			//实际参数就是在main函数你想传入的实际物体 而形参就是一个寿司模型用这个模型告诉微波炉要怎么处理这个寿司模型 这个实际不存在是虚构的
		}

		回到正常的函数
		比如你先做一个1*2*...*n的函数 (n<10 n太大数字太大)
		你就要确定你要传入说明参数 像这里参数就是n 
		然后确认要返回什么类型 因为n<10 所以是不会超出整数int的范围的 所以返回的类型是int
		之后你就要想怎么实现这一功能 因为是要一个一个乘起来 所以要用循环
		你要把得到的结果用return 反馈出去
		代码如下
		int jiecheng(int n)
		{
			int result=1;
			for(int i=1;i<=n;i++)
			{
				result=result*i;
			}
			return result;
		}
		由于有0的阶乘是1， 所以在循环外面可以加两个个判断 
		负数的阶乘就要把它变成相反数处理 返回-result
		注意 一个函数可以后多个return 但是最好是只有一个return 这样程序的意思很清晰
		int jiecheng(int n)
		{
			int result=1;
			//if(n==0)
			//{
			//	result = 1;//这里会发现最开始已经定义了result=1所以这个if判断没啥必要
			//}
			if(n<0){
				n=-n;
				result=-1;//先把n变成正数 适应下面的循环 result变成-1这样乘出来的就是负数
			}
			for(int i=1;i<=n;i++)
			{
				result=result*i;
			}
			return result;
		}

		在主函数中调用函数
		定义好函数后呢 你就可以在主函数中调用了 
		常见的有赋值 printf 等
		int mian()
		{
			int x=5;
			printf("%d",jiecheng(5));
		}
		得到的结果就是输出了120

8.递归函数
	递归函数要把握好一个原则 就是每一步的上一步是什么
	其实阶乘就是一个很好的例子
	6阶乘(6!)=5!*6
	5!=4!*5
	那么以此类推 n！=(n-1)!*n
	把阶乘变成函数 就是说
	jiecheng(n)=jiecheng(n-1)*n 
	当n=1的时候 jiecheng(1)=1
	这样最后得到的是
		jiecheng(3)=(jiecheng(1)*2)*3
	从后面倒退上去 前者与后者的联系是什么 找到规律后就等于找到了递推的表达式 只要规定一个终点就行
	所以可以把上面第7点的阶乘函数变成如下的样子
	int jiecheng(int n){
		if(n==1)
			return 1;//终止条件 很重要 在写完下面的递推表达式后千万记得写这个
		else
			return jiecheng(n-1)*n; //这里就是得到的jiecheng表达式
	}
	一般递归函数开的就是阶乘或者累加(1+2+3+4...+n) 所以基本上这个记住也差不多了

