#include <iostream>
#include <cstring>
#include <queue>
#include <stack>
#include <map>
#include <vector>
#include <algorithm>
#include <math.h>
using namespace std;
char screen[40][100];
struct Tnode
{
	char data;
	Tnode *left, *right;
};
class BiTree
{
private:
	int size;
	Tnode *root;
	void preTraverse(Tnode *);								
	void midTraverse(Tnode *);								
	void postTraverse(Tnode *);								
	void CreatePreOrder(Tnode *&root, string &str, int &i); 


	bool CreatePreInOrder(Tnode *&, string, string, int, int, int &);

	bool CreatePostInOrder(Tnode *&, string, string, int, int, int &);

	int Getleaves(Tnode *);												 
	Tnode *Parent(Tnode *, char);										 
	void Locate(char, Tnode *, Tnode *&, Tnode *, Tnode *&, int, int &); 
	void GetDegree(Tnode *, map<int, int> &);							 
	void ChangeLeftRight(Tnode *);										 
	void Locate(char x, Tnode *, Tnode *&);								 
	bool GetNodePath(Tnode *, Tnode *, vector<char> &);					 
	void ConvertTreeStore(Tnode *, char *, int);						 
	void ConvertTreeTolist(Tnode *&, string, int);						 

	bool IsBalanced(Tnode *, int); 
	bool IsnormalTree(Tnode *);	   
	int Draw(Tnode *, int, int);   

public:
	BiTree();
	Tnode *GetRoot() { return root; } 
	char GetRootData()
	{
		if (root)
			return root->data;
		else
			return '\0';
	}									   
	map<int, int> GetDegree();			   
	bool CountEveryLevel(map<int, int> &); 
	int Getleaves();					   
	int GetSize() { return size; }
	bool IsEmpty() { return root == nullptr; }
	void Distroy(Tnode *&);			
	bool Delete(char);				
	void Clear();					
	bool GetLeft(char, char &);		
	bool GetRight(char, char &);	
	bool GetLeftBro(char, char &);	
	bool GetRightBro(char, char &); 

	void CreatePreOrder(string str);		
	bool CreatePreInOrder(string, string);	
	bool CreatePostInOrder(string, string); 
	int GetDepth(Tnode *);					
	int GetDepth();							

	void preOrder();							  
	void midOrder();							  
	void postOrder();							  
	void levelOrder();							  
	char Parent(char);							  
	bool Locate(char, Tnode *&, Tnode *&, int &); 
	bool Locate(char x, Tnode *&);				  

	void GetNodePath(Tnode *); 
	void GetAllNodePath();	   

	void ChangeLeftRight();			
	bool Insert(char, char, int);	
	bool IsBalanced();				
	bool IsnormalTree();			
	bool IsFull();					
	bool IsComplete();				
	char *ConvertTreeStore();		
	void ConvertTreeTolist(string); 
	void PrintTree();				

	~BiTree();
};

BiTree::BiTree()
{
	size = 0;
	root = nullptr;
}
void BiTree::Distroy(Tnode *&root)
{
	if (root->left)
		Distroy(root->left);
	if (root->right)
		Distroy(root->right);
	delete root;
	root = nullptr;
	size--;
}
void BiTree::Clear()
{
	if (root)
		Distroy(root);
}
BiTree::~BiTree()
{
	if (root)
		Distroy(root);
}
bool BiTree::Delete(char x)
{
	
	if (root->data == x)
	{
		Distroy(root);
		return true;
	}
	
	Tnode *p = Parent(root, x);
	if (p->left && p->left->data == x)
	{
		Distroy(p->left);
		p->left = nullptr;
		return true;
	}
	if (p->right && p->right->data == x)
	{
		Distroy(p->right);
		p->right = nullptr;
		return true;
	}
	return false;
}
int BiTree::Getleaves(Tnode *root)
{
	
	if (root == nullptr)
		return 0;
	else if (root->left == nullptr && root->right == nullptr)
		return 1;
	return Getleaves(root->left) + Getleaves(root->right);
}
int BiTree::Getleaves()
{
	return Getleaves(root);
}
bool BiTree::GetLeft(char x, char &out)
{
	Tnode *cur;
	Locate(x, cur);
	if (cur->left)
	{
		out = cur->left->data;
		return true;
	}
	else
		return false;
}
bool BiTree::GetRight(char x, char &out)
{
	Tnode *cur;
	Locate(x, cur);
	if (cur->right)
	{
		out = cur->right->data;
		return true;
	}
	else
		return false;
}
bool BiTree::GetLeftBro(char x, char &out)
{
	Tnode *p = Parent(root, x);
	if (p && p->left)
	{
		
		if (p->left && p->left->data != x)
		{
			out = p->left->data;
			return true;
		}
	}
	return false;
}
bool BiTree::GetRightBro(char x, char &out)
{
	Tnode *p = Parent(root, x);
	if (p && p->right)
	{
		
		if (p->right && p->right->data != x)
		{
			out = p->right->data;
			return true;
		}
	}
	return false;
}
void BiTree::CreatePreOrder(Tnode *&root, string &str, int &i)
{
	
	if (i >= str.length())
		str += '#';
	
	if (str[i] == '#' || str[i] == '\0')
		root = nullptr;
	else
	{
		root = new Tnode;
		root->data = str[i];
		size++;
		root->left = root->right = nullptr;
		CreatePreOrder(root->left, str, ++i);
		CreatePreOrder(root->right, str, ++i);
	}
}
void BiTree::CreatePreOrder(string str)
{
	int i = 0;
	CreatePreOrder(root, str, i);
}
void BiTree::preTraverse(Tnode *root)
{
	if (root == nullptr)
		return;
	else
	{
		cout << root->data << " ";
		preTraverse(root->left);
		preTraverse(root->right);
	}
}
void BiTree::midTraverse(Tnode *root)
{
	if (root == nullptr)
		return;
	else
	{
		midTraverse(root->left);
		cout << root->data << " ";
		midTraverse(root->right);
	}
}
void BiTree::postTraverse(Tnode *root)
{
	if (root == nullptr)
		return;
	else
	{
		postTraverse(root->left);
		postTraverse(root->right);
		cout << root->data << " ";
	}
}
int BiTree::GetDepth(Tnode *root)
{
	if (root == nullptr)
		return 0;
	else
	{
		int Dleft = GetDepth(root->left);
		int Dright = GetDepth(root->right);
		return (Dleft > Dright) ? (Dleft + 1) : (Dright + 1);
	}
}
Tnode *BiTree::Parent(Tnode *root, char x)
{
	if (root == nullptr)
		return nullptr;
	if ((root->left && root->left->data == x) || (root->right && root->right->data == x))
		return root;
	Tnode *temp;
	temp = Parent(root->left, x);
	if (temp)
		return temp;
	temp = Parent(root->right, x);
	return temp;
}
char BiTree::Parent(char x)
{
	Tnode *p = Parent(root, x);
	if (p)
		return p->data;
	return '\0';
}
void BiTree::GetDegree(Tnode *root, map<int, int> &Degree)
{
	int cnt = 0;
	if (root->left)
		cnt++;
	if (root->right)
		cnt++;
	Degree[cnt]++;
	if (root->left)
		GetDegree(root->left, Degree);
	if (root->right)
		GetDegree(root->right, Degree);
}

map<int, int> BiTree::GetDegree()
{
	map<int, int> Degree;
	GetDegree(root, Degree);
	return Degree;
}
int BiTree::GetDepth()
{
	return GetDepth(root);
}
void BiTree::preOrder()
{
	preTraverse(root);
	cout << endl;
}
void BiTree::postOrder()
{
	postTraverse(root);
	cout << endl;
}
void BiTree::midOrder()
{
	midTraverse(root);
	cout << endl;
}
void BiTree::levelOrder()
{
	queue<Tnode *> Q;
	if (root)
		Q.push(root);
	while (!Q.empty())
	{
		Tnode *cur = Q.front();
		Q.pop();
		cout << cur->data << " ";
		if (cur->left)
			Q.push(cur->left);
		if (cur->right)
			Q.push(cur->right);
	}
	cout << endl;
}
bool BiTree::CreatePreInOrder(Tnode *&root, string preStr, string inStr, int low, int high, int &n)
{
	int i;
	
	if (low > high)
	{
		root = nullptr;
		return true;
	}
	else
	{
		
		root = new Tnode;
		root->data = preStr[n];
		root->left = root->right = nullptr;
		size++;
	}
	
	for (i = low; i <= high && inStr[i] != preStr[n]; i++)
		;
	if (inStr[i] == preStr[n])
	{
		
		n++;
		if (!CreatePreInOrder(root->left, preStr, inStr, low, i - 1, n))
			return false;
		if (!CreatePreInOrder(root->right, preStr, inStr, i + 1, high, n))
			return false;
	}
	else 
		return false;
	return true;
}



bool BiTree::CreatePostInOrder(Tnode *&root, string postStr, string inStr, int low, int high, int &n)
{
	int i;
	
	if (low > high)
	{
		root = nullptr;
		return true;
	}
	else
	{
		
		root = new Tnode;
		root->data = postStr[n];
		root->left = root->right = nullptr;
		size++;
	}
	
	for (i = low; i <= high && postStr[n] != inStr[i]; i++)
		;
	if (postStr[n] == inStr[i])
	{
		n--;
		if (!CreatePostInOrder(root->right, postStr, inStr, i + 1, high, n))
			return false;
		if (!CreatePostInOrder(root->left, postStr, inStr, low, i - 1, n))
			return false;
	}
	else 
		return false;
	return true;
}
bool BiTree::CreatePostInOrder(string post, string mid)
{
	
	int m = mid.length();
	int n = post.length();
	int cmp[256] = {0};
	if (m != n)
		return false;
	for (int i = 0; i < m; i++)
		cmp[mid[i]]++;
	for (int i = 0; i < n; i++)
	{
		cmp[post[i]]--;
		if (cmp[post[i]] < 0)
			return false;
	}
	int x = post.length() - 1;
	if (CreatePostInOrder(root, post, mid, 0, post.length() - 1, x))
		return true;
	return false;
}
bool BiTree::CreatePreInOrder(string pre, string mid)
{
	
	int m = mid.length();
	int n = pre.length();
	int cmp[256] = {0};
	if (m != n)
		return false;
	for (int i = 0; i < m; i++)
		cmp[mid[i]]++;
	for (int i = 0; i < n; i++)
	{
		cmp[pre[i]]--;
		if (cmp[pre[i]] < 0)
			return false;
	}
	
	int x = 0;
	if (CreatePreInOrder(root, pre, mid, 0, m - 1, x))
		return true;
	return false;
}

void BiTree::Locate(char x, Tnode *root, Tnode *&target, Tnode *parent, Tnode *&parent_target, int depth, int &depth_target)
{
	if (root)
	{
		
		if (root->data == x)
		{
			target = root;
			depth_target = depth;
			parent_target = parent;
			return;
		}
		
		else
			parent = root;
		
		Locate(x, root->left, target, parent, parent_target, depth + 1, depth_target);
		Locate(x, root->right, target, parent, parent_target, depth + 1, depth_target);
	}
}

bool BiTree::Locate(char x, Tnode *&target, Tnode *&parent, int &depth)
{

	Tnode *temp_target = nullptr;
	Tnode *temp_parent = nullptr;
	int temp_depth = 0;
	Locate(x, root, temp_target, nullptr, temp_parent, 1, temp_depth);
	target = temp_target;
	parent = temp_parent;
	depth = temp_depth;
	if (temp_target == nullptr)
	{
		return false;
		cout << "false" << endl;
	}
	return true;
}

void BiTree::Locate(char x, Tnode *root, Tnode *&target)
{
	if (root)
	{
		
		if (root->data == x)
		{
			target = root;
			return;
		}
		
		Locate(x, root->left, target);
		Locate(x, root->right, target);
	}
}
bool BiTree::Locate(char x, Tnode *&target)
{
	Tnode *temp_target = nullptr;
	if (x == '#')
	{
		target = root;
		return true;
	}
	Locate(x, root, temp_target);
	if (temp_target == nullptr)
	{
		cout << "false" << endl;
		return false;
	}
	target = temp_target;
	return true;
}
bool BiTree::CountEveryLevel(map<int, int> &Count)
{
	
	queue<Tnode *> Q;
	if (root == nullptr)
		return false;
	Q.push(root);
	Q.push(nullptr);
	int level = 1;
	int count = 0;
	while (!Q.empty())
	{
		Tnode *front = Q.front();
		Q.pop();
		if (front == nullptr)
		{
			Count[level] = count;
			level++;
			if (Q.empty())
				break;
			else
				Q.push(nullptr);
			count = 0;
		}
		else
		{
			count++;
			if (front->left)
				Q.push(front->left);
			if (front->right)
				Q.push(front->right);
		}
	}
	return true;
}
bool BiTree::GetNodePath(Tnode *root, Tnode *target, vector<char> &v)
{
	if (root == nullptr)
		return false;
	v.push_back(root->data);
	
	bool found = false;
	if (root == target)
	{
		for (int i = 0; i < v.size() - 1; i++)
			cout << v[i] << "->";
		cout << v[v.size() - 1] << endl;
		return true;
	}
	
	if (!found && root->left)
		found = GetNodePath(root->left, target, v);
	if (!found && root->right)
		found = GetNodePath(root->right, target, v);
	
	v.pop_back();
	return found;
}
void BiTree::GetNodePath(Tnode *target)
{
	vector<char> v;
	GetNodePath(root, target, v);
}
void BiTree::GetAllNodePath()
{
	queue<Tnode *> Q;
	if (root)
		Q.push(root);
	while (!Q.empty())
	{
		Tnode *cur = Q.front();
		Q.pop();
		GetNodePath(cur);
		if (cur->left)
			Q.push(cur->left);
		if (cur->right)
			Q.push(cur->right);
	}
}
void BiTree::ChangeLeftRight(Tnode *root)
{
	if (root)
	{
		Tnode *temp = root->left;
		root->left = root->right;
		root->right = temp;
		ChangeLeftRight(root->left);
		ChangeLeftRight(root->right);
	}
	else
		return;
}

void BiTree::ChangeLeftRight()
{
	ChangeLeftRight(root);
}

bool BiTree::Insert(char parent, char target, int mode)
{
	
	Tnode *ParentNode;
	if (Locate(parent, ParentNode))
	{
		if (mode)
		{
			if (ParentNode->right)
				ParentNode->right->data = target;
			else if (ParentNode->right == nullptr)
			{
				ParentNode->right = new Tnode;
				ParentNode->right->right = ParentNode->right->left = nullptr;
				ParentNode->right->data = target;
			}
		}
		else
		{
			if (ParentNode->left)
				ParentNode->left->data = target;
			else if (ParentNode->left == nullptr)
			{
				ParentNode->left = new Tnode;
				ParentNode->left->right = ParentNode->left->left = nullptr;
				ParentNode->left->data = target;
			}
		}
		size++;
	}
	return false;
}
bool BiTree::IsBalanced(Tnode *root, int depth)
{
	
	if (root == nullptr)
	{
		depth = 0;
		return true;
	}
	
	
	int left = 0, right = 0;
	if (IsBalanced(root->left, left) && IsBalanced(root->right, right))
	{
		int diff = abs(left - right);
		if (diff <= 1)
		{
			
			depth = max(left, right) + 1;
			return true;
		}
	}
	return false;
}
bool BiTree::IsBalanced()
{
	int depth = 0;
	return IsBalanced(root, depth);
}
bool BiTree::IsComplete()
{
	map<int, int> DegreeMap;
	DegreeMap = GetDegree();
	return DegreeMap[1] == 0;
}

bool BiTree::IsnormalTree()
{
	return IsnormalTree(root);
}
bool BiTree::IsnormalTree(Tnode *root)
{
	if (root == nullptr)
		return true;
	if (root->right == nullptr && root->left == nullptr)
		return true;
	if (root->left && root->right)
	{
		if (IsnormalTree(root->left) && IsnormalTree(root->right))
			return true;
		return false;
	}
	return false;
}
bool BiTree::IsFull()
{
	int depth = GetDepth();
	return (pow(2, depth) - 1) == size;
}
void BiTree::ConvertTreeStore(Tnode *root, char *a, int i)
{
	if (root != nullptr)
	{
		a[i - 1] = root->data;
		if (root->left)
			ConvertTreeStore(root->left, a, i * 2);
		if (root->right)
			ConvertTreeStore(root->right, a, i * 2 + 1);
	}
	else
		a[i - 1] = '#';
}
char *BiTree::ConvertTreeStore()
{
	char *a = new char;
	ConvertTreeStore(root, a, 1);
	return a;
}
void BiTree::ConvertTreeTolist(Tnode *&root, string a, int i)
{
	int len = a.length();
	if (a[i - 1] != '#' && i <= len)
	{
		root = new Tnode;
		root->data = a[i - 1];
		size++;
		root->left = root->right = nullptr;
		if (a[2 * i - 1] != '#')
			ConvertTreeTolist(root->left, a, 2 * i);
		if (a[2 * i] != '#')
			ConvertTreeTolist(root->right, a, 2 * i + 1);
	}
	else if (a[i - 1] == '#')
		return;
}
void BiTree::ConvertTreeTolist(string a)
{
	ConvertTreeTolist(root, a, 1);
}
int BiTree::Draw(Tnode *root, int startx, int y)
{
	
	int endX = startx;

	
	
	
	if (root->left)
		endX = Draw(root->left, startx, y + 2) + 1;

	
	int rootX = endX;
	
	
	screen[y][rootX] = root->data;
	
	endX++; 
	if (root->right)
		
		endX = Draw(root->right, endX, y + 2);
	return endX; 
}
void BiTree::PrintTree()
{
	for (int i = 0; i < 40; i++)
		for (int j = 0; j < 65; j++)
			screen[i][j] = ' ';
	Draw(root, 0, 0);
	
	
	
	int height = GetDepth() * 2;
	for (int i = 0; i < height; i++)
	{
		screen[i][64] = '\0';
		cout << "\t" << screen[i] << endl;
	}
}
