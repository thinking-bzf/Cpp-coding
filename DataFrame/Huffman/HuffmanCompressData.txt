include <iostream>
include <string.h>
include "Graph.h"
using namespace std;
void input(int *x, int start, int end);
void ShowMenu();
void CreateG(Graph &);           
void CreateN(Graph &);           
void CreateDN(Graph &);           
void CreateDG(Graph &);           
void ShowMatrix(Graph &);         
void GraphTraverse(Graph &);      
void Insertertices(Graph &);     
void InsertEdge(Graph &);         
void Deleteertices(Graph &);     
void DeleteEdge(Graph &);         
void MinSpanningTree(Graph &);    
void TopologicalSorting(Graph &); 
void Dijkstra(Graph &);           (Dijkstra)
void Floyd(Graph &);              (Floyd)
void OptimalAddress(Graph &);     

int main()
{
    int choice;
    Graph G;
    while (1)
    {
        int size;
        ShowMenu();
        cout << "\nPlease input a integer from 1 to 16 for choice:";
        input(&choice, 1, 16);
        if (choice == 16)
            break;
        switch (choice)
        {
        case 1:
             
            CreateG(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 2:
             
            CreateN(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case :
             
            CreateDG(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 4:
             
            CreateDN(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            * code *
            break;
        case 5:
             
            ShowMatrix(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            * code *
            break;
        case 6:
             
            GraphTraverse(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            * code *
            break;
        case :
             
            Insertertices(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            * code *
            break;
        case :
             
            InsertEdge(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            * code *
            break;
        case :
             
            Deleteertices(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            * code *
            break;
        case 10:
             
            DeleteEdge(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 11:
             
            MinSpanningTree(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 12:
             
            TopologicalSorting(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 1:
             (Dijkstra)
            Dijkstra(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 14:
             (Floyd)
            Floyd(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        case 15:
             
            OptimalAddress(G);
            cout << endl
                 << "Press any key to return Menu" << endl;
            getchar();
            getchar();
            break;
        }
    }
    return 0;
}
void ShowMenu()
{
    cout << "*********************I Love L*************************" << endl;
    cout << endl;
    cout << "***********************Graph System*********************" << endl;
    cout << "*                                                      *" << endl;
    cout << "*     1. Create G           2. Create N              *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*     . Create DG           4. Create DN              *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*     5. Show Matrix         6. BFSDFS                *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*     . Insert ertices     . Insert Edge            *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*     . Delete ertices    10. Delete Edge            *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*    11. Min-Spanning Tree  12. Topological Sorting    *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*    1. Dijkstra           14. Floyd                  *" << endl;
    cout << "*                                                      *" << endl;
    cout << "*    15. Optimal Address    16. Exit                   *" << endl;
    cout << "*                                                      *" << endl;
    cout << "********************************************************" << endl;
}
void input(int *x, int start = 1, int end = 2)
{
    while (!(cin >> *x) || (*x < start) || (*x > end))
    {
         
        cout << "InputError:please input again";
        cin.clear(); 
        cin.sync();  
    }
}
void CreateG(Graph &G) 
{
    getchar();
    cout << "=================Create ndirected Graph==================" << endl;
    cout << "--------------Press Enter for default Graph---------------" << endl;
    cout << "Please input the Node of the Graph:";
    char s[200];
    int NodeCount;
    int EdgeCount;
    cin.getline(s, 200);
    string x(s);
    if (x.empty())
    {
        G.init(DG, 6);
        G.addGEdge('C', 'B');
        G.addGEdge('D', 'B');
        G.addGEdge('E', 'C');
        G.addGEdge('E', 'C');
        G.addGEdge('E', 'D');
        G.addGEdge('F', 'C');
        G.addGEdge('F', 'D');
        G.addGEdge('F', 'E');
        cout << "Create Graph successfully." << endl;
        cout << "The current Graph is:" << endl;
        G.Show();
    }
    else
    {
        NodeCount = stoi(x);
        cout << "Please input the count of the Edges:";
        cin >> EdgeCount;
        G.init(DG, NodeCount);
        for (int i = 0; i < EdgeCount; i++)
        {
            char s, e;
            cout << "Please input the first of the edges:";
            cin >> s;
            cout << "Please input the second of the edges:";
            cin >> e;
            G.addGEdge(s, e);
        }
    }
    cout << "The Graph has " << G.Getnumertices() << " Nodes, " << G.GetnumEdges() << " Edges." << endl;
}
void CreateN(Graph &G) 
{
    getchar();
    cout << "=================Create ndirected Network==================" << endl;
    cout << "--------------Press Enter for default Network---------------" << endl;
    cout << "Please input the Node of the Network:";
    char s[200];
    int NodeCount;
    int EdgeCount;
    cin.getline(s, 200);
    string x(s);
    if (x.empty())
    {
        G.init(DN, 6);
        G.addNEdge('E', 'D', );
        G.addNEdge('C', 'B', 1);
        cout << "Create Network successfully." << endl;
        cout << "The current Network is:" << endl;
        G.Show();
    }
    else
    {
        NodeCount = stoi(x);
        cout << "Please input the count of the Edges:";
        cin >> EdgeCount;
        G.init(DN, NodeCount);
        for (int i = 0; i < EdgeCount; i++)
        {
            char s, e;
            int value;
            cout << "Please input the first of the edges:";
            cin >> s;
            cout << "Please input the second of the edges:";
            cin >> e;
            input(&value);
            G.addNEdge(s, e, value);
        }
    }
    cout << "The Network has " << G.Getnumertices() << " Nodes, " << G.GetnumEdges() << " Edges." << endl;
}
void CreateDG(Graph &G) 
{
    getchar();
    cout << "=================Create directed Graph====================" << endl;
    cout << "--------------Press Enter for default Graph---------------" << endl;
    cout << "Please input the Node of the Graph:";
    char s[200];
    int NodeCount;
    int EdgeCount;
    cin.getline(s, 200);
    string x(s);
    if (x.empty())
    {
        G.init(DG, 6);
        G.addGEdge('A', 'D');
        G.addGEdge('A', 'F');
        G.addGEdge('B', 'C');
        G.addGEdge('B', 'F');
        G.addGEdge('C', 'D');
        G.addGEdge('D', 'C');
        G.addGEdge('E', 'A');
        G.addGEdge('E', 'B');
        G.addGEdge('F', 'D');
        cout << "Create Graph successfully." << endl;
        cout << "The current Graph is:" << endl;
        G.Show();
    }
    else
    {
        NodeCount = stoi(x);
        cout << "Please input the count of the Edges:";
        cin >> EdgeCount;
        G.init(DG, NodeCount);
        for (int i = 0; i < EdgeCount; i++)
        {
            char s, e;
            cout << "Please input the start of the edges:";
            cin >> s;
            cout << "Please input the end of the edges:";
            cin >> e;
            G.addGEdge(s, e);
        }
    }
    cout << "The Graph has " << G.Getnumertices() << " Nodes, " << G.GetnumEdges() << " Edges." << endl;
}
void CreateDN(Graph &G) 
{

    getchar();
    cout << "===================Create directed Network================" << endl;
    cout << "--------------Press Enter for default Network-------------" << endl;
    cout << "Please input the Node of the Graph:";
    char s[200];
    int NodeCount;
    int EdgeCount;
    cin.getline(s, 200);
    string x(s);
    if (x.empty())
    {
        G.init(DN, 6);
        G.addNEdge('A', 'E', );
        G.addNEdge('B', 'E', );
        G.addNEdge('B', 'F', 4);
        G.addNEdge('C', 'D', 2);
        G.addNEdge('C', 'F', 6);
        G.addNEdge('E', 'F', 2);
        G.addNEdge('D', 'A', 5);
        G.addNEdge('D', 'C', 5);
        G.addNEdge('D', 'E', );
        G.addNEdge('F', 'B', );
        G.addNEdge('F', 'C', );
        G.addNEdge('F', 'D', 6);
        cout << "Create Network successfully." << endl;
        cout << "The current Network is:" << endl;
        G.Show();
    }
    else
    {
        NodeCount = stoi(x);
        cout << "Please input the count of the Edges:";
        cin >> EdgeCount;
        G.init(DN, NodeCount);
        for (int i = 0; i < EdgeCount; i++)
        {
            char s, e;
            int value;
            cout << "Please input the start of the edges:";
            cin >> s;
            cout << "Please input the end of the edges:";
            cin >> e;
            input(&value);
            G.addNEdge(s, e, value);
        }
    }
    cout << "The Network has " << G.Getnumertices() << " Nodes, " << G.GetnumEdges() << " Edges." << endl;
}
void ShowMatrix(Graph &G) 
{
    cout << "The current GraphNetwork is:" << endl;
    G.Show();
    cout << "The Network has " << G.Getnumertices() << " Nodes, " << G.GetnumEdges() << " Edges." << endl;
    cout << "The Drgree of the Node is:" << endl;
    for (int i = 0; i < G.Getnumertices(); i++)
    {
        char Node = G.GetNode(i);
        int InDegree = G.GetInDegree(Node);
        int OutDegree = G.GetOutDegree(Node);
        GraphStyle style = G.GetStyle();
        if (style == DG || style == DN)
            cout << "The Degree of " << Node << " is :" << InDegree + OutDegree << "; InDegree: " << InDegree << ",OutDegree: " << OutDegree << endl;
        if (style == DG || style == DN)
            cout << "The Degree of " << Node << " is :" << InDegree + OutDegree;
    }
}
void GraphTraverse(Graph &G) 
{
    cout << "the BFS of Graph:";
    G.BFS();
    cout << endl;
    cout << "the DFS of Graph:";
    G.DFS();
    cout << endl;
}
void InsertEdge(Graph &G) 
{
    GraphStyle style = G.GetStyle();

    if (style == DG || style == DG)
    {
        char s, e;
        cout << "Please input the start of the edges to insert:";
        cin >> s;
        cout << "Please input the end of the edges to insert:";
        cin >> e;
        if (G.addGEdge(s, e))
            cout << "Insert successfully." << endl;
        else
            cout << "Fail to Insert." << endl;
    }
    else if (style == DN || style == DG)
    {
        char s, e;
        int value;
        cout << "Please input the start of the edges to insert:";
        cin >> s;
        cout << "Please input the end of the edges to insert:";
        cin >> e;
        input(&value);
        if (G.addNEdge(s, e, value))
            cout << "Insert successfully." << endl;
        else
            cout << "Fail to Insert." << endl;
    }
}
void Insertertices(Graph &G) 
{
    char Node;
    cout << "Please input the Node wanted to insert:";
    cin >> Node;
    if (G.addNode(Node))
        cout << "Insert successfully." << endl;
    else
        cout << "Fail to Insert." << endl;
}
void DeleteEdge(Graph &G) 
{
    GraphStyle style = G.GetStyle();
    if (style == DG || style == DG)
    {
        char s, e;
        cout << "Please input the start of the edges to delete:";
        cin >> s;
        cout << "Please input the end of the edges to delete:";
        cin >> e;
        if (G.DeleteEdge(s, e))
            cout << "Delete successfully." << endl;
        else
            cout << "Fail to delete." << endl;
    }
    else if (style == DN || style == DG)
    {
        char s, e;
        int value;
        cout << "Please input the start of the edges to delete:";
        cin >> s;
        cout << "Please input the end of the edges to delete:";
        cin >> e;
        if (G.DeleteEdge(s, e))
            cout << "Delete successfully." << endl;
        else
            cout << "Fail to delete." << endl;
    }
}
void Deleteertices(Graph &G) 
{
    getchar();
    char Node;
    cout << "Please input the Node wanted to delete:";
    cin >> Node;
    if (G.DeleteNode(Node))
        cout << "Delete successfully." << endl;
    else
        cout << "Fail to delete." << endl;
}
void MinSpanningTree(Graph &G) 
{
    G.init(DN, 6);
    G.addNEdge('A', 'B', 4);
    G.addNEdge('A', 'C', 46);
    G.addNEdge('A', 'F', 1);
    G.addNEdge('B', 'E', 12);
    G.addNEdge('C', 'D', 1);
    G.addNEdge('C', 'F', 25);
    G.addNEdge('D', 'E', );
    G.addNEdge('D', 'F', 25);
    G.addNEdge('E', 'F', 26);
    vector<pair<int, int>> MST = G.Prim();
    cout << "The current Graph is:" << endl;
    G.Show();
    int sum = 0;

    for (int i = 0; i < MST.size(); i++) MST
    {
        cout << G.GetNode(MST[i].first) << "->" << G.GetNode(MST[i].second) << " value: " << G.GetEdgealue(MST[i].first, MST[i].second) << endl;
        sum += G.GetEdgealue(MST[i].first, MST[i].second);
    }
    cout << "the total value is " << sum << endl;
    vector<pair<int, int>> MST2 = G.ruskal();
    sum = 0;
    for (int i = 0; i < MST2.size(); i++) MST
    {
        cout << G.GetNode(MST2[i].first) << "->" << G.GetNode(MST2[i].second) << " value: " << G.GetEdgealue(MST2[i].first, MST2[i].second) << endl;
        sum += G.GetEdgealue(MST2[i].first, MST2[i].second);
    }
    cout << "the total value is " << sum << endl;
}
void TopologicalSorting(Graph &G) 
{
    G.init(DG, );
    G.addGEdge('A', 'B');
    G.addGEdge('A', 'C');
    G.addGEdge('B', 'D');
    G.addGEdge('B', 'E');
    G.addGEdge('C', 'E');
    G.addGEdge('D', 'F');
    G.addGEdge('E', 'G');
    G.addGEdge('F', 'G');
    G.Show();
    vector<int> vec;
    vec = G.TopologicalSort();
    cout << "The result of TopLogcal Sort is: ";
    for (int i = 0; i < vec.size(); i++)
        cout << G.GetNode(vec[i]) << " ";
}
void Dijkstra(Graph &G) (Dijkstra)
{
    G.init(DN, 6);
    G.addNEdge('A', 'B', 4);
    G.addNEdge('A', 'C', 46);
    G.addNEdge('A', 'F', 1);
    G.addNEdge('B', 'E', 12);
    G.addNEdge('C', 'D', 1);
    G.addNEdge('C', 'F', 25);
    G.addNEdge('D', 'E', );
    G.addNEdge('D', 'F', 25);
    G.addNEdge('E', 'F', 26);
    for (int k = 0; k < G.Getnumertices(); k++)
    {
        vector<struct dist> dis = G.Dijkstra(k);
        for (int i = 0; i < dis.size(); i++)
        {
            cout << "The distance of the shorest path of " << G.GetNode(k) << "-->" << G.GetNode(i) << " is " << dis[i].value << "\t";
            int cur = i;
            stack<int> path;
             ->
            while (dis[cur].prePos != k)
            {
                if (dis[cur].prePos == -1)
                {
                    cout << G.GetNode(k) << "-->" << G.GetNode(cur) << " No Path" << endl;
                    break;
                }
                path.push(dis[cur].prePos);
                cur = dis[cur].prePos;
            }
            path.push(i);
            cout << "The shorest path is ";
            cout << G.GetNode(k) << "-->";
            while (path.size() > 1)
            {
                cout << G.GetNode(path.top()) << "-->";
                path.pop();
            }
            if (path.size() > 0)
                cout << G.GetNode(path.top()) << endl;
            path.pop();
        }
        cout << endl;
    }
}
void Floyd(Graph &G) (Floyd)
{
    G.init(DN, 6);
    G.addNEdge('A', 'B', 4);
    G.addNEdge('A', 'C', 46);
    G.addNEdge('A', 'F', 1);
    G.addNEdge('B', 'E', 12);
    G.addNEdge('C', 'D', 1);
    G.addNEdge('C', 'F', 25);
    G.addNEdge('D', 'E', );
    G.addNEdge('D', 'F', 25);
    G.addNEdge('E', 'F', 26);
    vector<vector<struct Node>> dis = G.Floyd();
    int n = G.Getnumertices();
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            stack<int> path;
            cout << "The distance of the shorest path of " << G.GetNode(i) << "-->" << G.GetNode(j) << " is " << dis[i][j].value << "\t";
            int cur = j;
            cout << "The shorest path is: " << G.GetNode(i) << "-->";
            while (dis[i][cur].pre != i)
            {
                cur = dis[i][cur].pre;
                path.push(cur);
            }

            while (!path.empty())
            {
                cout << G.GetNode(path.top()) << "-->";
                path.pop();
            }
            cout << G.GetNode(j) << endl;
        }
        cout << endl;
    }
}
void OptimalAddress(Graph &G) 
{
    G.init(DN, 6);
    G.addNEdge('A', 'B', 4);
    G.addNEdge('A', 'C', 46);
    G.addNEdge('A', 'F', 1);
    G.addNEdge('B', 'E', 12);
    G.addNEdge('C', 'D', 1);
    G.addNEdge('C', 'F', 25);
    G.addNEdge('D', 'E', );
    G.addNEdge('D', 'F', 25);
    G.addNEdge('E', 'F', 26);
    vector<vector<struct Node>> dis = G.Floyd();
    int n = G.Getnumertices();
    cout << "The Matrix of Floyd is:" << endl;
    cout << "\t";
    for (int i = 0; i < n; i++)
        cout << G.GetNode(i) << "\t";
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        cout << G.GetNode(i) << "\t";
        for (int j = 0; j < n; j++)
            cout << dis[i][j].value << "\t";
        cout << endl;
    }
    cout << endl;
    int MinPlace;
    int Minalue = inf;
    for (int i = 0; i < n; i++)
    {
        int PathSum = 0;
        for (int j = 0; j < n; j++)
            PathSum += dis[i][j].value;
        cout << "The shortest distance from all the points to " << G.GetNode(i) << " is " << PathSum << endl;
        if (PathSum < Minalue)
        {
            Minalue = PathSum;
            MinPlace = i;
        }
    }
    cout << "The best place is " << G.GetNode(MinPlace) << endl;
}